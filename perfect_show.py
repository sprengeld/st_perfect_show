# 0. –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
## –æ—Å–Ω–æ–≤–Ω—ã–µ
import os
import streamlit as st
from typing import List

## Qdrant –∏ Langchain
from qdrant_client import QdrantClient
from langchain_huggingface import HuggingFaceEmbeddings

from langchain_huggingface import HuggingFaceEndpointEmbeddings
from langchain_qdrant import QdrantVectorStore
from langchain.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq
from langchain.schema import StrOutputParser
from langchain.schema.runnable import RunnablePassthrough

# ----------------------
# 1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã
# ----------------------
# –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ st.secrets
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ .streamlit/secrets.toml –µ—Å—Ç—å —ç—Ç–∏ –∫–ª—é—á–∏:
# QDRANT_URL = "https://your-cluster-url.cloud.qdrant.io"
# QDRANT_API_KEY = "your-qdrant-api-key"
# GROQ_API_KEY = "your-groq-api-key"
# HUGGINGFACEHUB_API_TOKEN = "your-huggingface-token" # –î–æ–±–∞–≤–∏–º –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤

os.environ["GROQ_API_KEY"] = st.secrets["GROQ_API_KEY"]
os.environ["HUGGINGFACEHUB_API_TOKEN"] = st.secrets.get("HUGGINGFACEHUB_API_TOKEN", "")

COLLECTION_NAME = "shows_collection"

# ----------------------
# 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant Cloud –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Retriever
# ----------------------


# –ò—Å–ø–æ–ª—å–∑—É–µ–º @st.cache_resource –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
@st.cache_resource
def get_qdrant_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è Qdrant Cloud."""
    client = QdrantClient(
        url=st.secrets["QDRANT_URL"],
        api_key=st.secrets["QDRANT_API_KEY"],
    )
    return client


@st.cache_resource
# def get_embeddings_model():
#     """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –õ–û–ö–ê–õ–¨–ù–û."""
#     model_name = "sentence-transformers/paraphrase-multilingual-mpnet-base-v2"
#     model_kwargs = {'device': 'cpu'}
#     encode_kwargs = {'normalize_embeddings': True} # –£–±—Ä–∞–ª batch_size, –æ–Ω –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å


#     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
#     return HuggingFaceEmbeddings(
#         model_name=model_name,
#         model_kwargs=model_kwargs,
#         encode_kwargs=encode_kwargs,
#     )
def get_embeddings_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ Hugging Face Endpoint API."""

    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º ID –º–æ–¥–µ–ª–∏. Langchain —Å–∞–º —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL.
    model_name = "sentence-transformers/paraphrase-multilingual-mpnet-base-v2"

    return HuggingFaceEndpointEmbeddings(
        repo_id=model_name,  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä 'repo_id'
        huggingfacehub_api_token=st.secrets["HUGGINGFACEHUB_API_TOKEN"],
    )


def format_docs(docs: List) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM."""
    return "\n".join(f"{d.metadata.get('title')}: {d.page_content}" for d in docs)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    client = get_qdrant_client()
    embeddings_model = get_embeddings_model()

    vector_store = QdrantVectorStore(
        client=client,
        collection_name=COLLECTION_NAME,
        embedding=embeddings_model,
    )

    retriever = vector_store.as_retriever(
        search_type="similarity", search_kwargs={"k": 5}
    )

    st.sidebar.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant Cloud –∏ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant –∏–ª–∏ –º–æ–¥–µ–ª—è–º: {e}")
    st.stop()


# ----------------------
# 3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM (—É–∂–µ —á–µ—Ä–µ–∑ API)
# ----------------------
@st.cache_resource
def get_llm():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LLM –º–æ–¥–µ–ª—å (—É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ API)."""
    return ChatGroq(model="llama-3.3-70b-versatile", temperature=0.25, max_tokens=1000)


llm = get_llm()


# ----------------------
# 4Ô∏è‚É£ Prompt –¥–ª—è RAG + RAG-—Ü–µ–ø–æ—á–∫–∞
# ----------------------
rag_prompt_template = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            """–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –≤–æ–ª—à–µ–±–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã.
–°—Ç–∏–ª—å:
- –õ–µ–≥–∫–æ –∏ –æ—Ç –¥—É—à–∏, –∫–∞–∫ —Å –±–ª–∏–∑–∫–∏–º –¥—Ä—É–≥–æ–º
- –Æ–º–æ—Ä –∏ –∑–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ –∑–∞–∫—É–ª–∏—Å—å–µ
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏ (—Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ–∏)
- –ù–∞ —Ä—É—Å—Å–∫–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Å —ç–º–æ–¥–∑–∏ üéâ
- –†–∞—Å—Å–∫–∞–∂–∏, –∫–æ–º—É —Å–µ—Ä–∏–∞–ª –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç
- –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤—ã–≤–æ–¥–∏ —Å —á–µ—Ç–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –ø—É–Ω–∫—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞.
- –í—ã–¥–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
- –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–µ—Ä–∏–∞–ª–∞–º, –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç–∞–∫—É—é –º–∞–≥–∏—é —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å.

–ü–æ–º–Ω–∏: –Æ–º–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±—Ä—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º ‚Äî —Å–æ–∑–¥–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –±–ª–∏–∑–∫–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ–∂–∞–µ—Ç —Å–µ—Ä–∏–∞–ª—ã.

–ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –∂–¥—É –æ—Ç —Ç–µ–±—è:
---
–í–æ–ø—Ä–æ—Å: –ü–æ—Å–æ–≤–µ—Ç—É–π —Å–µ—Ä–∏–∞–ª –ø—Ä–æ –ª—é–±–æ–≤—å —Å –¥—Ä–∞–º–æ–π
–û—Ç–≤–µ—Ç:
–û, –¥—Ä—É–∂–∏—â–µ! –ï—Å—Ç—å —É –º–µ–Ω—è –ø–∞—Ä–∞ —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ –∑–∞–ø–∞—Å–µ –Ω–∞ —Ç–∞–∫–æ–π —Å–ª—É—á–∞–π. –î–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É, —á–µ–º –æ–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã:

–°–µ—Ä–∏–∞–ª –ø–µ—Ä–≤—ã–π: "–ë–∞—Ö–∞—Ä"! (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
1. –û —á–µ–º: –ú–µ–ª–æ–¥—Ä–∞–º–∞ –æ —Ç–∞–∫–æ–π –ª—é–±–≤–∏, —á—Ç–æ –Ω–µ —Å–¥–∞–µ—Ç—Å—è –¥–∞–∂–µ –ø–µ—Ä–µ–¥ –±—É—Ä—è–º–∏ —Å—É–¥—å–±—ã, –µ—â–µ –∏ —Å —Ç–∞–∫–∏–º –∑–∞–Ω–æ—Å—á–∏–≤—ã–º —Ñ–∏–Ω–∞–ª–æ–º, —á—Ç–æ –≥–ª–∞–∑–∞ –æ—Ç–∫—Ä–æ—é—Ç—Å—è —à–∏—Ä–µ, —á–µ–º —É —Å–æ–≤—ã! üòÑ
2. –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª: —Å—Ç—Ä–∞—Å—Ç—å, —Å–ª–µ–∑—ã, –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–∏–Ω–∞–ª - —á—Ç–æ –µ—â–µ –Ω–∞–¥–æ –¥–ª—è —Å—á–∞—Å—Ç—å—è?
3. –ö–æ–º—É –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è: –≤—Å–µ–º —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Å–æ–±–∞–º, —Ñ–∞–Ω–∞—Ç–∞–º –ö–µ—Ä–µ–º–∞ –ë—é—Ä—Å–∏–Ω–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—á–µ–ª–µ–π üé¢üíî.

–°–µ—Ä–∏–∞–ª –≤—Ç–æ—Ä–æ–π: ¬´–ò–≤–∞–Ω –ù–∏–∫–æ–≥–¥–∞¬ª! (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
1. –û —á–µ–º: –Ω–∞—Å—Ç–æ—è—â–∞—è —Å–∞–≥–∞ —Å –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏ –æ—Ç –±—ã–≤—à–µ–≥–æ —á–∏–Ω–æ–≤–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—Å—è –ª–µ—Ç–∞—Ç—å (–∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–ª–µ—Ç–æ–º!). –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–æ–π –ø—á–µ–ª –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ ‚Äî –∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ üòú!
2. –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª: –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏, –Ω–µ–æ–±—ã—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.
3. –ö–æ–º—É –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è: –±—é–¥–∂–µ—Ç–Ω–∏–∫–∞–º –∏ —á–∏–Ω–æ–≤–Ω–∏–∫–∞–º –∏ –ª—é–±–∏—Ç–µ–ª—è–º –ø—Ä–æ—á–∏—Ö –æ—Å—Ç—Ä–æ—Å—é–∂–µ—Ç–Ω—ã—Ö –ª–∏–Ω–∏–π

""",
        ),
        (
            "human",
            "–í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ —Å–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏:\n{context}\n\n–ê —Ç–µ–ø–µ—Ä—å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–π –ø–æ–¥–±–æ—Ä–∫–µ, –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å: {question}",
        ),
    ]
)

# –°–æ–∑–¥–∞–µ–º RAG —Ü–µ–ø–æ—á–∫—É
rag_chain = (
    {
        "context": retriever | format_docs,
        "question": RunnablePassthrough(),
    }
    | rag_prompt_template
    | llm
    | StrOutputParser()
)


# ----------------------
# 5Ô∏è‚É£ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# ----------------------
st.set_page_config(page_title="üé¨ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤", layout="wide")
st.title("üé¨ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é üßû‚Äç‚ôÇÔ∏è")

user_query = st.text_area(
    "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëÄ",
    height=100,
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–∏–∞–ª –ø—Ä–æ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ, –Ω–æ —Ü–∏–Ω–∏—á–Ω–æ–≥–æ –≤—Ä–∞—á–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∞",
)
with st.sidebar:
    top_k_slider = st.slider(
        "üçø–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ –ø–æ–¥–±–æ—Ä–∫–µ:",
        min_value=1,
        max_value=20,
        value=5,
    )


if st.button("‚ú® –ù–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª"):
    if user_query.strip():
        with st.spinner("üßû‚Äç‚ôÄÔ∏è–î–∂–∏–Ω–Ω –∫–æ–ª–¥—É–µ—Ç –Ω–∞–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏..."):

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏ ---
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º vector_store.similarity_search_with_score –≤–º–µ—Å—Ç–æ retriever
            docs_with_scores = vector_store.similarity_search_with_score(
                user_query, k=top_k_slider
            )

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
            if not docs_with_scores:
                st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É üò¢")
                st.stop()

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –†–∞–∑–¥–µ–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ---
            # –≠—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ RAG –∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            docs = [doc for doc, score in docs_with_scores]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è RAG-—Ü–µ–ø–æ—á–∫–∏
            context_text = format_docs(
                docs
            )  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è format_docs —É–∂–µ –µ—Å—Ç—å –∏ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç

            # --- RAG-—Ü–µ–ø–æ—á–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
            rag_chain = (
                {
                    "context": lambda x: context_text,  # –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    "question": RunnablePassthrough(),
                }
                | rag_prompt_template
                | llm
                | StrOutputParser()
            )

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG-—Ü–µ–ø–æ—á–∫–∏
            answer = rag_chain.invoke(user_query)

            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç LLM
            st.markdown("### üßû‚Äç‚ôÇÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –î–∂–∏–Ω–Ω–∞:")
            st.markdown(answer)

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º "—Å—ã—Ä—ã–µ" —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏ ---
            st.markdown("---")
            st.markdown("### üîπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–∏–∞–ª–∞—Ö:")

            # –¢–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ docs_with_scores, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É, –∏ –∫ –æ—Ü–µ–Ω–∫–µ
            for d, score in docs_with_scores:
                with st.container(border=True):
                    cols = st.columns([1, 3])
                    with cols[0]:
                        if d.metadata.get("image_movie"):
                            st.image(
                                d.metadata["image_movie"], use_container_width=True
                            )
                    with cols[1]:
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä—è–º–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        st.markdown(
                            f"#### {d.metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚≠ê –ö–ü: {d.metadata.get('film_rating_kp', '–ù/–î')} | ‚≠ê **IMDb:** {d.metadata.get('film_rating_imdb', '–ù/–î')} | ‚≠ê **KinoGo:** {d.metadata.get('rating_votes', '–ù/–î')}"
                        )
                        st.markdown(f"–°—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {score:.4f}")
                        st.markdown(
                            f"**–ì–æ–¥:** {d.metadata.get('out_year', '–ù/–î')} | **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {d.metadata.get('duration', '–ù/–î')}"
                        )
                        # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ...
                        st.markdown(
                            f"**–ñ–∞–Ω—Ä—ã:** {', '.join(d.metadata.get('genres', []))}"
                        )
                        st.markdown(
                            f"**–°—Ç—Ä–∞–Ω–∞:** {', '.join(d.metadata.get('country', []))}"
                        )
                        if d.metadata.get("url_movie"):
                            st.link_button(
                                "üîó –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", d.metadata.get("url_movie")
                            )

                        st.caption(f"–û–ø–∏—Å–∞–Ω–∏–µ: *{d.page_content}*")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã —è —Ç–µ–±–µ –ø–æ–º–æ–≥‚ú®")
